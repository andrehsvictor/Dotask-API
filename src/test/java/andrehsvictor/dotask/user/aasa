   private static final String EMAIL_PATH = "/api/v1/users/email";
    private static final String USER_PATH = "/api/v1/users";
    private static final String VALID_PASSWORD = "Password1!";
    private static final int HTTP_NO_CONTENT = 204;
    private static final int HTTP_BAD_REQUEST = 400;
    private static final int HTTP_CONFLICT = 409;
    private static final int HTTP_NOT_FOUND = 404;
    private static final int HTTP_CREATED = 201;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private Faker faker;

    @SpyBean
    private EmailService emailService;

    private User registeredUser;
    private String validEmail;
    private String validUrl;

    @BeforeEach
    void setUp() {
        // Create a test user
        validEmail = faker.internet().emailAddress();
        String name = faker.name().fullName();

        PostUserDto userDto = PostUserDto.builder()
                .name(name)
                .email(validEmail)
                .password(VALID_PASSWORD)
                .build();

        // Register user via API
        ValidatableResponse response = given()
                .contentType(ContentType.JSON)
                .body(userDto)
                .when()
                .post(USER_PATH)
                .then()
                .statusCode(HTTP_CREATED);

        String userId = response.extract().jsonPath().getString("id");
        registeredUser = userRepository.findById(java.util.UUID.fromString(userId)).orElseThrow();

        validUrl = "https://" + faker.internet().domainName() + "/verify";
    }

    @AfterEach
    void tearDown() {
        userRepository.deleteAll();
    }

    private ValidatableResponse sendVerificationEmail(EmailSendingAction action, String email, String url) {
        SendActionEmailDto dto = SendActionEmailDto.builder()
                .action(action)
                .email(email)
                .url(url)
                .build();

        return given()
                .contentType(ContentType.JSON)
                .body(dto)
                .when()
                .post(EMAIL_PATH)
                .then()
                .log().ifValidationFails();
    }

    @Nested
    @DisplayName("Verify email action")
    class VerifyEmailAction {
        @Test
        @DisplayName("Should send verification email successfully")
        void shouldSendVerificationEmailSuccessfully() {
            sendVerificationEmail(EmailSendingAction.VERIFY_EMAIL, validEmail, validUrl)
                    .statusCode(HTTP_NO_CONTENT);

            // Verify email service was called with correct parameters
            verify(emailService, times(1)).send(
                    eq(validEmail),
                    eq("Verify Your Email - Dotask"),
                    contains("Verify Your Email Address"));

            // Verify token was stored in the database
            User updatedUser = userRepository.findByEmail(validEmail).orElseThrow();
            assertNotNull(updatedUser.getEmailVerificationToken());
            assertNotNull(updatedUser.getEmailVerificationTokenExpiresAt());
        }

        @Test
        @DisplayName("Should return 409 when email already verified")
        void shouldReturn409WhenEmailAlreadyVerified() {
            // Set email as verified
            registeredUser.setEmailVerified(true);
            userRepository.save(registeredUser);

            sendVerificationEmail(EmailSendingAction.VERIFY_EMAIL, validEmail, validUrl)
                    .statusCode(HTTP_CONFLICT)
                    .body("errors[0]", equalTo("Email already verified"));
        }

        @Test
        @DisplayName("Should return 404 when email doesn't exist")
        void shouldReturn404WhenEmailDoesNotExist() {
            String nonExistentEmail = "nonexistent@example.com";

            sendVerificationEmail(EmailSendingAction.VERIFY_EMAIL, nonExistentEmail, validUrl)
                    .statusCode(HTTP_NOT_FOUND)
                    .body("errors[0]", equalTo("User not found with email: " + nonExistentEmail));
        }
    }

    @Nested
    @DisplayName("Reset password action")
    class ResetPasswordAction {
        @Test
        @DisplayName("Should send reset password email successfully")
        void shouldSendResetPasswordEmailSuccessfully() {
            sendVerificationEmail(EmailSendingAction.RESET_PASSWORD, validEmail, validUrl)
                    .statusCode(HTTP_NO_CONTENT);

            // Verify email service was called with correct parameters
            verify(emailService, times(1)).send(
                    eq(validEmail),
                    eq("Reset Your Password - Dotask"),
                    contains("Reset Your Password"));

            // Verify token was stored in the database
            User updatedUser = userRepository.findByEmail(validEmail).orElseThrow();
            assertNotNull(updatedUser.getPasswordResetToken());
            assertNotNull(updatedUser.getPasswordResetTokenExpiresAt());
        }

        @Test
        @DisplayName("Should return 404 when email doesn't exist")
        void shouldReturn404WhenEmailDoesNotExist() {
            String nonExistentEmail = "nonexistent@example.com";

            sendVerificationEmail(EmailSendingAction.RESET_PASSWORD, nonExistentEmail, validUrl)
                    .statusCode(HTTP_NOT_FOUND)
                    .body("errors[0]", equalTo("User not found with email: " + nonExistentEmail));
        }
    }

    @Nested
    @DisplayName("Validation errors")
    class ValidationErrors {
        @Test
        @DisplayName("Should return 400 when URL is missing")
        void shouldReturn400WhenUrlIsMissing() {
            SendActionEmailDto dto = SendActionEmailDto.builder()
                    .action(EmailSendingAction.VERIFY_EMAIL)
                    .email(validEmail)
                    .build();

            given()
                    .contentType(ContentType.JSON)
                    .body(dto)
                    .when()
                    .post(EMAIL_PATH)
                    .then()
                    .statusCode(HTTP_BAD_REQUEST);
        }

        @Test
        @DisplayName("Should return 400 when email is missing")
        void shouldReturn400WhenEmailIsMissing() {
            SendActionEmailDto dto = SendActionEmailDto.builder()
                    .action(EmailSendingAction.VERIFY_EMAIL)
                    .url(validUrl)
                    .build();

            given()
                    .contentType(ContentType.JSON)
                    .body(dto)
                    .when()
                    .post(EMAIL_PATH)
                    .then()
                    .statusCode(HTTP_BAD_REQUEST);
        }

        @Test
        @DisplayName("Should return 400 when action is missing")
        void shouldReturn400WhenActionIsMissing() {
            SendActionEmailDto dto = SendActionEmailDto.builder()
                    .email(validEmail)
                    .url(validUrl)
                    .build();

            given()
                    .contentType(ContentType.JSON)
                    .body(dto)
                    .when()
                    .post(EMAIL_PATH)
                    .then()
                    .statusCode(HTTP_BAD_REQUEST);
        }

        @Test
        @DisplayName("Should return 400 when email is invalid")
        void shouldReturn400WhenEmailIsInvalid() {
            SendActionEmailDto dto = SendActionEmailDto.builder()
                    .action(EmailSendingAction.VERIFY_EMAIL)
                    .email("invalid-email")
                    .url(validUrl)
                    .build();

            given()
                    .contentType(ContentType.JSON)
                    .body(dto)
                    .when()
                    .post(EMAIL_PATH)
                    .then()
                    .statusCode(HTTP_BAD_REQUEST);
        }
    }